%slide
  %aside{:class => 'gdbar bottom right'}
    %img{:src => 'images/profile.png'}
  %hgroup
    %h2
      %code `whoami`
  %article
    %ul
      %li Chris Roberts
      %li Works at HeavyWater Operations
      %li Pragmatic open source zealot
      %li Ruby fanboy
      %li Toolsmith

%slide{:class => 'segue dark quote nobackground'}
  %aside{:class => 'gdbar bottom right'}
    %img{:src => 'images/hourglass.png'}
  %article{:class => 'flexbox vleft auto-fadein'}
    %q You will never 'find' time for anything. If you want time, you must make it.
    %div.author Charles Buxton

%slide
  %aside{:class => 'gdbar top right', :style => 'background: #cc6'}
    %img{:src => 'images/clock.png'}
  %hgroup
    %h2 Time conservation
  %article
    %p What's wasting my time?
    %ul.build
      %li
        VMs and tooling
        %ul
          %li.yellow Strict resource requirements
          %li.red Time consuming startup and teardowns
          %li.red Lack of cluster style building
      %li
        Testing
        %ul
          %li.green Isolated testing
          %li.red Integration testing
      %li
        Existing Infrastructure
        %ul
          %li.red Remote Chef server

%slide
  %hgroup
    %h2 Existing tools
  %article
    %p Cloud based
    %ul
      %li Knife cloud plugins (ec2, rackspace, etc)
      %li Spiceweasel - clusters
    %p Host based
    %ul
      %li Virtualbox GUI/CLI
      %li Vagrant
      %li Hand tuning LXC

%slide
  %aside{:class => 'gdbar bottom right'}
    %img{:src => 'images/lightbulb.png'}
  %hgroup
    %h2 Development via LXC
  %article
    %ul
      %li Fast node creations (clones)
      %li No hard resource requirements (sharing)
      %li Quick node refreshes
      %li Some what easy cluster building
      %li Local chef server instance
      %li Increased cycles with less foot tapping

%slide
  %aside{:class => 'gdbar bottom right'}
    %img{:src => 'images/tools.png'}
  %hgroup
    %h2 Composing a new tool
  %article.smaller
    %div{:class => 'columns-2'}
      %h3 Third Party Tools
      %ul
        %li LXC (Linux Containers)
        %li
          Chef
          %ul
            %li chef-solo (host provision)
            %li knife core (ui tools)
            %li erchef / chef-zero
          %li Test Kitchen
          %li ServerSpec

      %h3 Existing Tools
      %ul
        %li
          Cookbooks
          %ul
            %li lxc (container management)
            %li chef-server-populator (chef server provision)
          %li
            Ruby
            %ul
              %li elecksee

%slide{:class => 'segue dark quote nobackground'}
  %aside{:class => 'gdbar bottom right'}
    %img{:src => 'images/hazard.png'}
  %article{:class => 'flexbox vleft auto-fadein'}
    %q Everything stinks till it's finished.
    %div.author Dr. Seuss

%slide
  %hgroup
    %h2 Wiring together existing tools
  %article
    %br
    %br
    %ul
      %li Building for local development
      %li Snowflaked workstation
      %li Works on my machine
      %li State assumptions

%slide{:class => 'segue dark nobackground'}
  %hgroup{:class => 'auto-fadein'}
    %h2.reflect Vagabond
    %h3 In the wild

%slide
  %hgroup
    %h2 Installation and configuration
  %article
    %pre.prettyprint{'data-lang' => 'bash'}
      :preserve
        $> gem install vagabond
        $> vagabond init
    %ul
      %li Prompts for desired distributions
      %li Provisions hosts system
      %li Builds base containers for selected distributions
      %li Builds base container for chef-server instances

%slide
  %hgroup
    %h2 Vagabondfile (Hash)
  %article.smaller
    %pre.prettyprint{'data-lang' => 'ruby'}
      :preserve
        {
          :defaults => {
            :template => 'ubuntu_1204'
          },
          :nodes => {
            :ubuntu1204 => {
              :template => 'ubuntu_1204',
              :run_list => []
            }
          },
          :clusters => {},
          :server => {
            :enabled => false,
            :zero => false,
            :librarian => false,
            :berkshelf => false,
            :auto_upload => false
          },
          :sudo => true
        }
%slide
  %hgroup
    %h2 Vagabondfile (DSL)
  %article.smaller
    %pre.prettyprint{'data-lang' => 'ruby', :class => 'auto-scroll'}
      :preserve
        Vagabondfile.describe do
          defaults do
            template 'ubuntu_1204'
          end
          nodes do
            aptcacher.run_list ['recipe[apt::cacher-ng]']
            aptclient.run_list ['recipe[apt::cacher-client]']
          end
          clusters do
            cacher ['aptcacher', 'aptclient']
          end
          templates do
            ubuntu_1204_2G do
              base 'ubuntu_1204'
              memory.ram '2G'
              memory.swap '512M'
            end
          end
          server.enabled true
          callbacks do
            destroy [
              "vagabond knife node delete -y ${NAME}",
              "vagabond knife client delete -y ${NAME}"
            ]
          end
        end

%slide{:class => 'dark nobackground'}
  %article{:class => 'flexbox vcenter auto-fadein'}
    %h2.white Ephemeral

%slide
  %hgroup
    %h2 Test kitchen integration
  %article
    %ul
      %li Maps platforms to containers
      %li Adds `clusters` options
      %li Enables custom test-kitchen run
      %ul
        %li Start chef server
        %li Build all nodes in cluster
        %li Run tests on all nodes

%slide
  %hgroup
    %h2 Server Spec
  %article
    %ul
      %li Integration/acceptance testing
      %li Run list specific specs
      %li Tooling agnostic

%slide
  %hgroup
    %h2 More in-depth tests
  %article
    %p Do stuff and then test
    %pre.prettyprint{'data-lang' => 'ruby'}
      :preserve
        spec do
          clusters do
            test do
              provision do
                times 2
                spec :after_2
                after.every.run 'ps -AH ux'
              end
            end
          end
        end

%slide
  %hgroup
    %h2= 'Run vagabond run!'
  %article
    %iframe{:scrolling => 'no', :width => '650', :border => '0', :height => '516', :id => 'shelr_frame', :src => 'http://shelr.tv/records/520d22b296608048d2000071/embed'}
